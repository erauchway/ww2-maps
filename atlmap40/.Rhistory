atlmap <- st_transform(atlmap, crs = target_crs)
head(atlmap)
# Read basic map data to simple features object
atlmap <- st_read("atlmap40.geojson")
atlmap <- st_transform(atlmap, crs = target_crs)
head(atlmap)
# Read basic map data to simple features object
atlmap <- st_read("atlmap40.geojson")
st_transform(atlmap, crs = "ESRI:54030")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, results = "hide")
library(tidyverse)
library(sf)
library(cowplot)
library(ggtext)
sf_use_s2(FALSE)
# Set theme preferences. Futura for the mid-century look. Also adding a light blue panel background.
theme_set(theme_void() +
theme(legend.position = "bottom",
text = element_text(family = "Futura Medium"),
plot.title = element_markdown(size = rel(1.0), hjust = 1, vjust = -10),
plot.subtitle = element_markdown(size = rel(0.8)),
legend.title = element_text(size = rel(0.5)),
legend.text = element_text(size = rel(0.6)),
plot.caption = element_markdown(hjust = 0, size = rel(0.5)),
panel.background = element_rect(fill = "#f7fdff", color = "#f7fdff")))
setwd("~/Documents/ND-nazis/maps41/learn/atlmap40/")
minvars <- c("NAME", "geometry")
#World Robinson projection, https://epsg.io/54030
target_crs <- "ESRI:54030"
#load Natural Earth datasets
sub <- st_read(dsn = "~/Documents/ND-nazis/maps41/learn/ne_50m_admin_0_map_subunits/", layer = "ne_50m_admin_0_map_subunits")
toobig <- st_read(dsn = "~/Documents/ND-nazis/maps41/learn/ne_10m_admin_1_states_provinces", layer = "ne_10m_admin_1_states_provinces")
nec <- st_read(dsn = "~/Documents/ND-nazis/maps41/learn/ne_50m_admin_0_countries_lakes/", layer = "ne_50m_admin_0_countries_lakes")
#load Ourednik's 1938 map
map38 <- st_read("~/Documents/ND-nazis/maps41/learn/world_1938.geojson")
#load Michael de Groot's Europe map
eurmap <- st_read(dsn = "~/Documents/ND-nazis/maps41/learn/EuropeanBorders_WWII", layer = "August_31_1940")
eurmap <- st_transform(eurmap, crs = 4326)
# This code was for getting references for the boundaries of Newfoundland v. Canada, which I then cleaned up using QGIS
#newfref <- map38[which(map38$NAME == "Dominion of Newfoundland"),]
#newfref <- newfref[minvars]
#modcan <- nec[which(nec$NAME == "Canada"),]
#modcan <- modcan[minvars]
#canref <- map38[which(map38$NAME == "Canada"),]
#canref <- canref[minvars]
#canrough <- st_difference(modcan, newfref)
#newfrough <- st_difference(modcan, canref)
#st_write(canrough, "canrough.geojson")
#st_write(newfrough, "newfrough.geojson")
#North America
newf <- st_read("newf.geojson")
can <- st_read("can.geojson")
newf <- newf[minvars]
newf$NAME <- "Newfoundland"
can <- can[minvars]
usa <- nec[which(nec$ADMIN == "United States of America"),]
usa <- usa[c("ADMIN", "geometry")]
usa <- rename(usa, "NAME" = "ADMIN")
mex <- nec[which(nec$NAME == "Mexico"),]
mex <- mex[minvars]
#Caribbean republics and possessions
pr <- sub[which(sub$SUBUNIT == "Puerto Rico"),]
pr <- pr [c("SUBUNIT", "geometry")]
pr <- rename(pr, "NAME" = "SUBUNIT")
usvi <- sub[which(sub$SUBUNIT == "United States Virgin Islands"),]
usvi <- usvi[c("SUBUNIT", "geometry")]
usvi <- rename(usvi, "NAME" = "SUBUNIT")
cuba <- nec[which(nec$NAME == "Cuba"),]
cuba <- cuba[minvars]
bermuda <- nec[which(nec$NAME == "Bermuda"),]
bermuda <- bermuda[minvars]
#Working on the British West Indies, here. ***
bahamas <- nec[which(nec$NAME == "Bahamas"),]
bahamas <- bahamas[minvars]
bg <- nec[which(nec$NAME == "Guyana"),]
bg <- bg[minvars]
bg$NAME <- "British Guiana"
bh <- nec[which(nec$NAME == "Belize"),]
bh <- bh[minvars]
bh$NAME <- "British Honduras"
#Jamaica and dependecies, Turks and Caicos and Caymans
jamaica <- nec[which(nec$NAME == "Jamaica"),]
jamaica <- jamaica[minvars]
tc <- nec[which(nec$NAME == "Turks and Caicos Is."),]
tc <- tc[minvars]
tc$NAME <- "Turks and Caicos"
caym <- nec[which(nec$NAME == "Cayman Is."),]
caym <- caym[minvars]
caym$NAME <- "Caymans"
jamaica <- bind_rows(jamaica, tc, caym)
jamaica <- st_combine(jamaica)
jamaica <- tibble("NAME" = "Jamaica", "geometry" = jamaica)
#British Windward Islands: Grenada, St Lucia, St Vincent, Grenadines, Barbados, Dominica
gren <- nec[which(nec$NAME == "Grenada"),]
gren <- gren[minvars]
barb <- nec[which(nec$NAME == "Barbados"),]
barb <- barb[minvars]
sl <- nec[which(nec$NAME == "Saint Lucia"),]
sl <- sl[minvars]
svg <- nec[which(nec$NAME == "St. Vin. and Gren."),]
svg <- svg[minvars]
dom <- nec[which(nec$NAME == "Dominica"),]
dom <- dom[minvars]
bwi <- bind_rows(gren, barb, sl, svg, dom)
bwi <- st_combine(bwi)
bwi <- tibble("NAME" = "British Windward Islands", "geometry" = bwi)
tt <- nec[which(nec$NAME == "Trinidad and Tobago"),]
tt <- tt[minvars]
#British Leeward Islands: Antigua, Barbuda, Montserrat, St. Christopher, Nevis, Anguilla, BVI
st_
ab <- nec[which(nec$NAME == "Antigua and Barb."),]
ab <- ab[minvars]
mont <- nec[which(nec$NAME == "Montserrat"),]
mont <- mont[minvars]
skn <- nec[which(nec$NAME == "St. Kitts and Nevis"),]
skn <- skn[minvars]
ang <- nec[which(nec$NAME == "Anguilla"),]
ang <- ang[minvars]
bvi <- nec[which(nec$NAME == "British Virgin Is."),]
bvi <- bvi[minvars]
bli <- bind_rows(ab, mont, skn, ang, bvi)
bli <- st_combine(bli)
bli <- tibble("NAME" = "British Leeward Islands", "geometry" = bli)
#Netherlands West Indies: Curaçao, Aruba, Bonaire; Sint Eustatius, Sint Maarten, Saba
cur <- nec[which(nec$NAME == "Curaçao"),]
cur<- cur[minvars]
aru <- nec[which(nec$NAME == "Aruba"),]
aru <- aru[minvars]
bon <- toobig[which(toobig$name == "Bonaire"),]
bon <- rename(bon, NAME = name)
bon <- bon [minvars]
sm <- nec[which(nec$NAME == "Sint Maarten"),]
sm <- sm[minvars]
se <- toobig[which(toobig$name == "St. Eustatius"),]
se <- rename[se, NAME = name]
se <- se[minvars]
saba <- toobig[which(toobig$name == "Saba"),]
saba <- rename[saba, NAME = name]
saba <- saba[minvars]
da <- bind_rows(cur, aru, bon, sm, se, saba)
da <- st_combine(da)
da <- tibble("NAME" = "Netherlands West Indies", "geometry" = da)
su <- nec[which(nec$NAME == "Suriname"),]
su <- su[minvars]
su$NAME <- "Surinam"
#French West Indies: Guadeloupe, Martinique, Saint Martin, St. Barthélemy
gu <- sub[which(sub$NAME == "Guadeloupe"),]
gu <- gu[minvars]
sm <- sub[which(sub$SUBUNIT == "Saint Martin"),]
sm <- sm[c("SUBUNIT", "geometry")]
sm <- rename(sm, "NAME" = "SUBUNIT")
mart <- sub[which(sub$NAME == "Martinique"),]
mart <- mart[minvars]
sb <- sub[which(sub$NAME == "St-Barthélemy"),]
sb <- sb[minvars]
fwi <- bind_rows(gu,sm,mart,sb)
fwi <- st_combine(fwi)
fwi <- tibble("NAME" = "French West Indies", "geometry" = fwi)
fg <- sub[which(sub$SUBUNIT == "French Guiana"),]
fg <- fg[c("SUBUNIT", "geometry")]
fg <- rename(fg, NAME = SUBUNIT)
haiti <- nec[which(nec$NAME == "Haiti"),]
haiti <- haiti[minvars]
dr <- nec[which(nec$NAME == "Dominican Rep."),]
dr$NAME <- "Dominican Republic"
dr <- dr[minvars]
#Central America
guat <- nec[which(nec$NAME == "Guatemala"),]
guat <- guat[minvars]
hond <- nec[which(nec$NAME == "Honduras"),]
hond <- hond[minvars]
nic <- nec[which(nec$NAME == "Nicaragua"),]
nic <- nic[minvars]
els <- nec[which(nec$NAME == "El Salvador"),]
els <- els[minvars]
cr <- nec[which(nec$NAME == "Costa Rica"),]
cr <- cr[minvars]
pan <- nec[which(nec$NAME == "Panama"),]
pan <- pan[minvars]
col <- nec[which(nec$NAME == "Colombia"),]
col <- col[minvars]
#South America
ven <- nec[which(nec$NAME == "Venezuela"),]
ven <- ven[minvars]
bra <- nec[which(nec$NAME == "Brazil"),]
bra <- bra[minvars]
ecu <- nec[which(nec$NAME == "Ecuador"),]
ecu <- ecu[minvars]
per <- nec[which(nec$NAME == "Peru"),]
per <- per[minvars]
bol <- nec[which(nec$NAME == "Bolivia"),]
bol <- bol[minvars]
par <- nec[which(nec$NAME == "Paraguay"),]
par <- par[minvars]
arg <- nec[which(nec$NAME == "Argentina"),]
arg <- arg[minvars]
chil <- nec[which(nec$NAME == "Chile"),]
chil <- chil[minvars]
uru <- nec[which(nec$NAME == "Uruguay"),]
uru <- uru[minvars]
#Now, the eastern side of the Atlantic
#French West Africa: Mauritania, Senegal, Mali, Guinea, Ivory Coast, Burkina Faso, Benin, Niger
mau <- nec[which(nec$NAME == "Mauritania"),]
sen <- nec[which(nec$NAME == "Senegal"),]
mal <- nec[which(nec$NAME == "Mali"),]
gui <- nec[which(nec$NAME == "Guinea"),]
ic <- nec[which(nec$NAME == "Ivory Coast"),]
bf <- nec[which(nec$NAME == "Burkina Faso"),]
ben <- nec[which(nec$NAME == "Benin"),]
niger <- nec[which(nec$NAME == "Niger"),]
tog <- nec[which(nec$NAME == "Togo"),]
fwa <- bind_rows(mau, sen, mal, gui, ic, bf, ben, niger, tog)
fwa <- st_union(fwa)
fwa <- tibble("NAME" = "French West Africa", "geometry" = fwa)
fwa <- st_as_sf(fwa)
sl <- nec[which(nec$NAME == "Sierra Leone"),]
sl <- sl[minvars]
li <- nec[which(nec$NAME == "Liberia"),]
li <- li[minvars]
gc <- nec[which(nec$NAME == "Ghana"),]
gc <- gc[minvars]
gc$NAME <- "Gold Coast"
ic <- nec[which(nec$NAME == "Côte d'Ivoire"),]
ic <- ic[minvars]
ga <- nec[which(nec$NAME == "Gambia"),]
ga <- ga[minvars]
ga$NAME <- "British Gambia"
#need to work out Rio de Oro and modern Morocca / Western Sahara
ws <- nec[which(nec$NAME == "W. Sahara"),]
ws <- ss[minvars]
rdo <- map38[which(map38$NAME == "Rio De Oro"),]
rdo <- rdo[minvars]
oldmor <- st_read("oldmor.geojson")
rmor <- st_read("rmor.geojson")
rdo<-st_union(rdo, rmor)
rdo <- st_union(rdo, ws)
rdo <- rdo[minvars]
rdo$NAME <- "Rio de Oro"
nigeria <- nec[which(nec$NAME == "Nigeria"),]
nigeria <- nigeria[minvars]
gb <- nec[which(nec$NAME == "Guinea-Bissau"),]
gb <- gb[minvars]
cam <- nec[which(nec$NAME == "Cameroon"),]
cam <- cam[minvars]
alg <- nec[which(nec$NAME == "Algeria"),]
alg <- alg[minvars]
tun <- nec[which(nec$NAME == "Tunisia"),]
tun <- tun[minvars]
lib <- nec[which(nec$NAME == "Libya"),]
lib <- lib[minvars]
spain <- nec[which(nec$NAME == "Spain"),]
spain <- spain[minvars]
port <- nec[which(nec$NAME == "Portugal"),]
port <- port[minvars]
# Need to make occupied and Vichy France; this involved some messing about with QGIS
fraref <- sub[which(sub$SUBUNIT == "France"),]
fraref <- fraref[c("SUBUNIT", "geometry")]
vichy <- st_read("vichy.geojson")
vichy <- vichy[c("Name", "geometry")]
vichy <- rename(vichy, NAME = Name)
occ <- st_difference(fraref, vichy)
occ <- occ[c("NAME", "geometry")]
occ$NAME = "Occupied France"
cors <- sub[which(sub$NAME == "Corsica"),]
cors <- cors[c("NAME", "geometry")]
vichy <- st_union(vichy, cors)
vichy <- vichy[c("NAME", "geometry")]
vichy$NAME <- "Vichy France"
ital <- nec[which(nec$NAME == "Italy"),]
ital <- ital[minvars]
#Britain and its various Atlantic dependencies
uk <- nec[which(nec$NAME == "United Kingdom"),]
uk <- uk[minvars]
jers <- nec[which(nec$NAME == "Jersey"),]
jers <- jers[minvars]
guer <- nec[which(nec$NAME == "Guernsey"),]
guer <- guer[minvars]
man <- nec[which(nec$NAME == "Isle of Man"),]
man <- man[minvars]
ukatl <- bind_rows(uk, jers, guer, man)
ukatl <- st_union(ukatl)
ukatl <- tibble("NAME" = "United Kingdom", "geometry" = ukatl)
ukatl <- st_as_sf(ukatl)
falk <- nec[which(nec$NAME == "Falkland Is."),]
falk <- falk[minvars]
sga <- nec[which(nec$NAME == "S. Geo. and the Is."),]
sga <- sga[minvars]
green <- nec[which(nec$NAME == "Greenland"),]
green <- green[minvars]
ice <- nec[which(nec$NAME == "Iceland"),]
ice <- ice[minvars]
net <- nec[which(nec$NAME == "Netherlands"),]
net <- net[minvars]
belg <- nec[which(nec$NAME == "Belgium"),]
belg <- belg[minvars]
nor <- nec[which(nec$NAME == "Norway"),]
nor <- nor[minvars]
atlmap <- bind_rows(newf, can, usa, mex, pr, usvi, cuba, bermuda, bahamas, bh, bg, jamaica, bwi, tt, bli, da, su, fwi, fg, haiti, dr, guat, hond, nic, els, cr, pan, col, ven, bra, ecu, per, bol, par, arg, chil, uru, fwa, sl, li, gc, ga, rdo, nigeria, cam, alg, oldmor, ic, gb, tun, lib, spain, port, vichy, occ, ukatl, green, ice, falk, sga, net, belg, nor, ital)
head(atlmap)
st_write(atlmap, "~/Documents/ww2-maps/atlmap40/atlmap40.geojson")
# Read basic map data to simple features object
atlmap <- st_read("atlmap40.geojson")
setwd("~/Documents/ww2-maps/atlmap40/")
# Read basic map data to simple features object
atlmap <- st_read("atlmap40.geojson")
atlmap <- st_transform(atlmap, crs = "ESRI:54030")
head(atlmap)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, results = "hide")
library(tidyverse)
library(sf)
library(cowplot)
library(ggtext)
sf_use_s2(FALSE)
# Set theme preferences. Futura for the mid-century look. Also adding a light blue panel background.
theme_set(theme_void() +
theme(legend.position = "bottom",
text = element_text(family = "Futura Medium"),
plot.title = element_markdown(size = rel(1.0), hjust = 1, vjust = -10),
plot.subtitle = element_markdown(size = rel(0.8)),
legend.title = element_text(size = rel(0.5)),
legend.text = element_text(size = rel(0.6)),
plot.caption = element_markdown(hjust = 0, size = rel(0.5)),
panel.background = element_rect(fill = "#f7fdff", color = "#f7fdff")))
minvars <- c("NAME", "geometry")
#Coordinate reference system for this map will be World Robinson projection, https://epsg.io/54030
target_crs <- "ESRI:54030"
# Read basic map data to simple features object
atlmap <- st_read("atlmap40.geojson")
# Read supplementary variables and merge
status <- read_csv("atlnames.csv")
atlmap <- left_join(atlmap, status)
#Add ordered factor for status of territory
atlmap <- atlmap %>%
mutate(atlmap, status_ord = factor(status, levels = c("Axis",
"Axis-occupied",
"Vichy",
"Neutral",
"Allies-occupied",
"Allies",
ordered = TRUE)))
#Ensure data in sf form
#atlmap <- st_as_sf(atlmap)
#Establish divergent color palette with correct number of variables
mypal = c("#008080","#70a494","#b4c8a8","#f6edbd","#de8a5a","#ca562c")
#This code for projected data, from here https://www.r-bloggers.com/2019/04/zooming-in-on-maps-with-sf-and-ggplot2/
atlmap <- st_transform(atlmap, crs = target_crs)
disp_win_wgs84 <- st_sfc(st_point(c(-85, -13)), st_point(c(3, 70)), crs = 4326)
disp_win_trans <- st_transform(disp_win_wgs84, crs = target_crs)
disp_win_coord <- st_coordinates(disp_win_trans)
# Generate centroids as reference points for labels; file pacnames.csv already contains x and y adjustments for labels relative to these centroids
atlmap <- cbind(atlmap, st_coordinates(st_centroid(atlmap)))
# Establish major and minor labels based on variable "maj" from pacnames.csv
majlab <- atlmap[which(atlmap$maj == 4),]
minlab <- atlmap[which(atlmap$maj == 3),]
miclab <- atlmap[which(atlmap$maj == 2),]
# Plot map, setting small black borders and fill based on ordered factor variable
p <- ggplot(atlmap) + geom_sf()
head(atlmap)
# Plot map, setting small black borders and fill based on ordered factor variable
p <- ggplot(atlmap)
p + geom_sf()
# Plot map, setting small black borders and fill based on ordered factor variable
p <- ggplot(atlmap, color = alpha(c("black"),0.5))
p + geom_sf()
# Plot map, setting small black borders and fill based on ordered factor variable
p <- ggplot(atlmap, color = alpha(c("black"),0.5))
p + geom_sf(mapping = aes(fill = status_ord), alpha = .6, size = 0.2))
# Plot map, setting small black borders and fill based on ordered factor variable
p <- ggplot(atlmap, color = alpha(c("black"),0.5))
p + geom_sf(mapping = aes(fill = status_ord), alpha = .6, size = 0.2)
# Plot map, setting small black borders and fill based on ordered factor variable
p <- ggplot(atlmap, color = alpha(c("black"),0.5))
p + geom_sf(mapping = aes(fill = status_ord), alpha = .6, size = 0.2) +
# Add colors based on divergent color scheme above
+ scale_fill_manual(values = mypal)
# Plot map, setting small black borders and fill based on ordered factor variable
p <- ggplot(atlmap, color = alpha(c("black"),0.5))
p + geom_sf(mapping = aes(fill = status_ord), alpha = .6, size = 0.2) +
# Add colors based on divergent color scheme above
scale_fill_manual(values = mypal)
# Plot map, setting small black borders and fill based on ordered factor variable
p <- ggplot(atlmap, color = alpha(c("black"),0.5))
p + geom_sf(mapping = aes(fill = status_ord), alpha = .6, size = 0.2) +
# Add colors based on divergent color scheme above
scale_fill_manual(values = mypal) +
#Crop and add full bleed to borders
coord_sf(xlim = disp_win_coord[,'X'], ylim = disp_win_coord[,'Y'], datum = target_crs, expand = FALSE)
# Plot map, setting small black borders and fill based on ordered factor variable
p <- ggplot(atlmap, color = alpha(c("black"),0.5))
p + geom_sf(mapping = aes(fill = status_ord), alpha = .6, size = 0.2) +
# Add colors based on divergent color scheme above
scale_fill_manual(values = mypal) +
#Crop and add full bleed to borders
coord_sf(xlim = disp_win_coord[,'X'], ylim = disp_win_coord[,'Y'], datum = target_crs, expand = FALSE) +
# Add major place labels
geom_richtext(data = majlab, inherit.aes = FALSE, mapping = aes(X, Y, label = mylabels), family = "Futura Medium", size = 5, fill = NA, label.color = NA, nudge_x = majlab$nx, nudge_y = majlab$ny, na.rm = TRUE) +
# Add minor place labels
#  geom_richtext(data = minlab, inherit.aes = FALSE, mapping = aes(X, Y, label = mylabels), family = "Futura Medium", size = 4, fill = NA, label.color = NA, nudge_x = minlab$nx, nudge_y = minlab$ny, na.rm = TRUE) +
# Add smallest place labels
#  geom_richtext(data = miclab, inherit.aes = FALSE, mapping = aes(X, Y, label = mylabels), family = "Futura Medium", size = 3, fill = NA, label.color = NA, nudge_x = miclab$nx, nudge_y = miclab$ny, na.rm = TRUE)
```
# Plot map, setting small black borders and fill based on ordered factor variable
p <- ggplot(atlmap, color = alpha(c("black"),0.5))
p + geom_sf(mapping = aes(fill = status_ord), alpha = .6, size = 0.2) +
# Add colors based on divergent color scheme above
scale_fill_manual(values = mypal) +
#Crop and add full bleed to borders
coord_sf(xlim = disp_win_coord[,'X'], ylim = disp_win_coord[,'Y'], datum = target_crs, expand = FALSE) +
# Add major place labels
geom_richtext(data = majlab, inherit.aes = FALSE, mapping = aes(X, Y, label = mylabels), family = "Futura Medium", size = 5, fill = NA, label.color = NA, nudge_x = majlab$nx, nudge_y = majlab$ny, na.rm = TRUE)
# Read basic map data to simple features object
atlmap <- st_read("atlmap40.geojson")
# Read supplementary variables and merge
status <- read_csv("atlnames.csv")
atlmap <- left_join(atlmap, status)
#Add ordered factor for status of territory
atlmap <- atlmap %>%
mutate(atlmap, status_ord = factor(status, levels = c("Axis",
"Axis-occupied",
"Vichy",
"Neutral",
"Allies-occupied",
"Allies",
ordered = TRUE)))
#Ensure data in sf form
#atlmap <- st_as_sf(atlmap)
#Establish divergent color palette with correct number of variables
mypal = c("#008080","#70a494","#b4c8a8","#f6edbd","#de8a5a","#ca562c")
#This code for projected data, from here https://www.r-bloggers.com/2019/04/zooming-in-on-maps-with-sf-and-ggplot2/
atlmap <- st_transform(atlmap, crs = target_crs)
disp_win_wgs84 <- st_sfc(st_point(c(-85, -13)), st_point(c(3, 70)), crs = 4326)
disp_win_trans <- st_transform(disp_win_wgs84, crs = target_crs)
disp_win_coord <- st_coordinates(disp_win_trans)
# Generate centroids as reference points for labels; file pacnames.csv already contains x and y adjustments for labels relative to these centroids
atlmap <- cbind(atlmap, st_coordinates(st_centroid(atlmap)))
# Establish major and minor labels based on variable "maj" from pacnames.csv
majlab <- atlmap[which(atlmap$maj == 4),]
minlab <- atlmap[which(atlmap$maj == 3),]
miclab <- atlmap[which(atlmap$maj == 2),]
# Plot map, setting small black borders and fill based on ordered factor variable
p <- ggplot(atlmap, color = alpha(c("black"),0.5))
p + geom_sf(mapping = aes(fill = status_ord), alpha = .6, size = 0.2) +
# Add colors based on divergent color scheme above
scale_fill_manual(values = mypal) +
#Crop and add full bleed to borders
coord_sf(xlim = disp_win_coord[,'X'], ylim = disp_win_coord[,'Y'], datum = target_crs, expand = FALSE) +
# Add major place labels
geom_richtext(data = majlab, inherit.aes = FALSE, mapping = aes(X, Y, label = mylabels), family = "Futura Medium", size = 5, fill = NA, label.color = NA, nudge_x = majlab$nx, nudge_y = majlab$ny, na.rm = TRUE)
# Add minor place labels
#  geom_richtext(data = minlab, inherit.aes = FALSE, mapping = aes(X, Y, label = mylabels), family = "Futura Medium", size = 4, fill = NA, label.color = NA, nudge_x = minlab$nx, nudge_y = minlab$ny, na.rm = TRUE) +
# Add smallest place labels
#  geom_richtext(data = miclab, inherit.aes = FALSE, mapping = aes(X, Y, label = mylabels), family = "Futura Medium", size = 3, fill = NA, label.color = NA, nudge_x = miclab$nx, nudge_y = miclab$ny, na.rm = TRUE)
# Read basic map data to simple features object
atlmap <- st_read("atlmap40.geojson")
# Read supplementary variables and merge
status <- read_csv("atlnames.csv")
atlmap <- left_join(atlmap, status)
#Add ordered factor for status of territory
atlmap <- atlmap %>%
mutate(atlmap, status_ord = factor(status, levels = c("Axis",
"Axis-occupied",
"Vichy",
"Neutral",
"Allies-occupied",
"Allies",
ordered = TRUE)))
#Ensure data in sf form
#atlmap <- st_as_sf(atlmap)
#Establish divergent color palette with correct number of variables
mypal = c("#008080","#70a494","#b4c8a8","#f6edbd","#de8a5a","#ca562c")
#This code for projected data, from here https://www.r-bloggers.com/2019/04/zooming-in-on-maps-with-sf-and-ggplot2/
atlmap <- st_transform(atlmap, crs = target_crs)
disp_win_wgs84 <- st_sfc(st_point(c(-85, -13)), st_point(c(3, 70)), crs = 4326)
disp_win_trans <- st_transform(disp_win_wgs84, crs = target_crs)
disp_win_coord <- st_coordinates(disp_win_trans)
# Generate centroids as reference points for labels; file pacnames.csv already contains x and y adjustments for labels relative to these centroids
atlmap <- cbind(atlmap, st_coordinates(st_centroid(atlmap)))
# Establish major and minor labels based on variable "maj" from pacnames.csv
majlab <- atlmap[which(atlmap$maj == 4),]
minlab <- atlmap[which(atlmap$maj == 3),]
miclab <- atlmap[which(atlmap$maj == 2),]
# Plot map, setting small black borders and fill based on ordered factor variable
p <- ggplot(atlmap, color = alpha(c("black"),0.5))
p + geom_sf(mapping = aes(fill = status_ord), alpha = .6, size = 0.2) +
# Add colors based on divergent color scheme above
scale_fill_manual(values = mypal) +
#Crop and add full bleed to borders
coord_sf(xlim = disp_win_coord[,'X'], ylim = disp_win_coord[,'Y'], datum = target_crs, expand = FALSE) +
# Add major place labels
geom_richtext(data = majlab, inherit.aes = FALSE, mapping = aes(X, Y, label = mylabels), family = "Futura Medium", size = 5, fill = NA, label.color = NA, nudge_x = majlab$nx, nudge_y = majlab$ny, na.rm = TRUE) +
# Add minor place labels
geom_richtext(data = minlab, inherit.aes = FALSE, mapping = aes(X, Y, label = mylabels), family = "Futura Medium", size = 4, fill = NA, label.color = NA, nudge_x = minlab$nx, nudge_y = minlab$ny, na.rm = TRUE)
# Add smallest place labels
#  geom_richtext(data = miclab, inherit.aes = FALSE, mapping = aes(X, Y, label = mylabels), family = "Futura Medium", size = 3, fill = NA, label.color = NA, nudge_x = miclab$nx, nudge_y = miclab$ny, na.rm = TRUE)
# Plot map, setting small black borders and fill based on ordered factor variable
p <- ggplot(atlmap, color = alpha(c("black"),0.5))
p + geom_sf(mapping = aes(fill = status_ord), alpha = .6, size = 0.2) +
# Add colors based on divergent color scheme above
scale_fill_manual(values = mypal) +
#Crop and add full bleed to borders
coord_sf(xlim = disp_win_coord[,'X'], ylim = disp_win_coord[,'Y'], datum = target_crs, expand = FALSE) +
# Add major place labels
geom_richtext(data = majlab, inherit.aes = FALSE, mapping = aes(X, Y, label = mylabels), family = "Futura Medium", size = 5, fill = NA, label.color = NA, nudge_x = majlab$nx, nudge_y = majlab$ny, na.rm = TRUE) +
# Add minor place labels
geom_richtext(data = minlab, inherit.aes = FALSE, mapping = aes(X, Y, label = mylabels), family = "Futura Medium", size = 4, fill = NA, label.color = NA, nudge_x = minlab$nx, nudge_y = minlab$ny, na.rm = TRUE) +
# Add smallest place labels
geom_richtext(data = miclab, inherit.aes = FALSE, mapping = aes(X, Y, label = mylabels), family = "Futura Medium", size = 3, fill = NA, label.color = NA, nudge_x = miclab$nx, nudge_y = miclab$ny, na.rm = TRUE) +
theme(legend.position = c(0.827, 0.06),
legend.text = element_text(family = "Futura Medium", color = "black", size = 8),
legend.title = element_text(family = "Futura Medium", color = "black", size = 9)) +
#Set title of legend
labs(fill = "Status of territory as of summer 1940")
